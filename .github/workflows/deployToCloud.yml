name: Deploy to cloud.

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

  workflow_dispatch:

jobs:
  terraform:
    name: Run Terraform.
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
          cli_config_credentials_token: ${{ secrets.HCLOUD_TOKEN }}

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Setup SSH Key
        run: |
          echo "${{ secrets.HETZNER_BOX_KEY }}" > hetzner_box_key
          chmod 600 hetzner_box_key

      - name: Setup SSH Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p 23 -H ${{ secrets.HETZNER_BOX_HOST }} >> ~/.ssh/known_hosts

      - name: Download Terraform State with rsync
        run: |
          rsync -avz -e "ssh -i hetzner_box_key -p23" ${USER}@${HOST}:./terraform.tfstate .
        env:
          USER: ${{ secrets.HETZNER_BOX_USER }}
          HOST: ${{ secrets.HETZNER_BOX_HOST }}

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan | tee plan-output.txt
        continue-on-error: true
        env:
          TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN }}

      - name: Upload Terraform State with rsync
        run: |
          rsync -avz -e "ssh -i hetzner_box_key -p23" ./terraform.tfstate ${USER}@${HOST}:./
        env:
          USER: ${{ secrets.HETZNER_BOX_USER }}
          HOST: ${{ secrets.HETZNER_BOX_HOST }}

      - name: Echo Terraform Plan Output
        run: cat plan-output.txt

      - name: Extract and Format Specific Outputs
        run: |
          awk '/client_ips/{flag=1; next} /]/{flag=0} flag' plan-output.txt | tr -d '," +' > client_ips.txt
          awk '/server_ips/{flag=1; next} /]/{flag=0} flag' plan-output.txt | tr -d '," +' > server_ips.txt
          echo "clients" > outputs.txt
          cat client_ips.txt >> outputs.txt
          echo "" >> outputs.txt
          echo "servers" >> outputs.txt
          cat server_ips.txt >> outputs.txt

      - name: Upload Outputs as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: outputs.txt

      - name: Encrypt terraforms ssh key
        run: |
          ls -la
          openssl aes-256-cbc -salt -in machines.pem -out machines_ssh_key.enc -k ${{ secrets.ENCRYPTION_KEY }}

      - name: Upload Encrypted SSH Key
        uses: actions/upload-artifact@v4
        with:
          name: ssh-key
          path: machines_ssh_key.enc
          retention-days: 1

  ansible:
    name: Run Ansible.
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - uses: actions/checkout@v3

      - name: Download Outputs
        uses: actions/download-artifact@v4
        with:
          name: terraform-outputs
          path: .

      - name: Use Outputs File
        run: |
          cat outputs.txt
          # Further commands to utilize outputs.txt

      - name: create hosts file
        run: |
          cp outputs.txt hosts.ini
          cat hosts.ini

      - name: Download Encrypted SSH Key
        uses: actions/download-artifact@v4
        with:
          name: ssh-key
          path: .

      - name: Decrypt SSH Key
        run: |
          openssl aes-256-cbc -d -in machines_ssh_key.enc -out machines_ssh_key -k ${{ secrets.ENCRYPTION_KEY }}
          chmod 600 machines_ssh_key

      # - name: Output Server IPs
      #   id: server_ips
      #   run: echo "::set-output name=server_ips::$(terraform output -raw server_ips)"

      # - name: Run Ansible Playbook
      #   env:
      #     ANSIBLE_HOST_KEY_CHECKING: False
      #     SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      #   run: |
      #     echo "${SSH_PRIVATE_KEY}" > ansible_ssh_key
      #     chmod 600 ansible_ssh_key
      #     echo '[clients]' > dynamic_inventory
      #     echo ${{ steps.client_ips.outputs.client_ips }} >> dynamic_inventory
      #     echo '[servers]' >> dynamic_inventory
      #     echo ${{ steps.server_ips.outputs.server_ips }} >> dynamic_inventory
      #     ansible-playbook -i dynamic_inventory playbook.yml --private-key ansible_ssh_key
